import click
import firebase_admin
from firebase_admin import credentials
from firebase_admin import firestore
import os

# Assuming firestore_admin.py handles the main initialization logic
# We might need to import or reuse parts of that initialization here
# or structure this as a command under the main cli group.
# For a standalone skeleton, we'll add basic initialization check.

# Define the name of the environment variable for the key path
SERVICE_ACCOUNT_KEY_ENV_VAR = 'FIREBASE_SERVICE_ACCOUNT_KEY_PATH'

# Global variable for the Firestore database client
db = None

def get_firestore_client(key_path=None):
    """Initializes Firebase Admin SDK and returns Firestore client."""
    global db
    if db is not None:
        return db # Return existing client if already initialized

    # Check if key_path is provided or can be read from env var
    if key_path is None:
         key_path = os.environ.get(SERVICE_ACCOUNT_KEY_ENV_VAR)

    if not key_path:
        click.echo(f"Error: Firebase service account key path is required. Set {SERVICE_ACCOUNT_KEY_ENV_VAR} env var or pass --key-path.")
        return None # Indicate failure

    try:
        cred = credentials.Certificate(key_path)
        if not firebase_admin._apps:
             firebase_admin.initialize_app(cred)
        else:
            firebase_admin.get_app() # Use default app if already initialized

        db = firestore.client()
        # click.echo("Firebase Admin SDK initialized successfully.") # Optional
        return db
    except Exception as e:
        click.echo(f"Error initializing Firebase: {e}")
        return None # Indicate failure


@click.command()
@click.option(
    '--key-path',
    envvar=SERVICE_ACCOUNT_KEY_ENV_VAR,
    type=click.Path(exists=True, dir_okay=False, resolve_path=True),
    help=f'Path to the Firebase service account key JSON file. Can also be set via the {SERVICE_ACCOUNT_KEY_ENV_VAR} environment variable.',
)
@click.option(
    '--topic',
    type=str,
    required=True,
    help='The topic for the article to be generated.'
)
@click.option(
    '--level',
    type=click.IntRange(1, 18),
    required=True,
    help='The target reading level (1-18) for the generated article.'
)
# Add more options as needed for LLM parameters (e.g., word count, style, model)
def generate_article(key_path, topic, level):
    """
    Generates a new article using an LLM based on topic and level,
    and adds it to the 'articles' collection in Firestore.
    """
    # 1. Initialize Firestore client
    firestore_db = get_firestore_client(key_path)
    if firestore_db is None:
        exit(1) # Exit if Firestore initialization failed

    click.echo(f"Generating article on topic '{topic}' for level {level}...")

    # --- Placeholder for LLM Interaction ---
    # 2. Call LLM API with topic and level constraints
    #    - This is where you would integrate with OpenAI, Google AI, etc.
    #    - You'll need to handle API keys, prompt engineering, etc.
    generated_title = f"Generated Article: {topic}" # Replace with actual LLM output
    generated_content = "This is placeholder content generated by the LLM skeleton.\n\nDetails: Topic - {topic}, Level - {level}".format(topic=topic, level=level) # Replace with actual LLM output
    generated_tags = [] # Replace with actual LLM output or derived tags

    if not generated_content:
        click.echo("LLM failed to generate content. Aborting.")
        exit(1) # Or handle retry logic

    click.echo("LLM content generated (placeholder).")

    # --- Prepare Article Data ---
    # 3. Prepare the data structure for Firestore
    #    - Generate a unique article ID (e.g., using UUID or a Firestore auto-ID)
    #    - Include generated_title, generated_content, level, tags, publishedAt (server timestamp)
    #    - You might want to add fields like 'source': 'llm_generator'

    # Using Firestore auto-ID for simplicity in skeleton
    doc_ref = firestore_db.collection('articles').document() # Creates a document reference with an auto-ID
    article_id = doc_ref.id # Get the generated ID

    article_data = {
        'title': generated_title,
        'content': generated_content,
        'level': level,
        'tags': generated_tags,
        'publishedAt': firestore.FieldValue.server_timestamp(), # Use server timestamp
        'source': 'llm_generator',
        'topic': topic # Store original topic for reference
    }

    # --- Add to Firestore ---
    # 4. Add the prepared data to the 'articles' collection
    try:
        doc_ref.set(article_data)
        click.echo(f"Article '{generated_title}' added successfully with ID '{article_id}'.")
    except Exception as e:
        click.echo(f"Error adding article to Firestore: {e}")
        exit(1)


# This allows the command to be run directly or imported into a main CLI group
if __name__ == '__main__':
    generate_article()